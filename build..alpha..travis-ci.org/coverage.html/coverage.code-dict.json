{"/home/travis/build/npmtest/node-npmtest-line-reader/test.js":"/* istanbul instrument in package npmtest_line_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-line-reader/lib.npmtest_line_reader.js":"/* istanbul instrument in package npmtest_line_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_line_reader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_line_reader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-line-reader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-line-reader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_line_reader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_line_reader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_line_reader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_line_reader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_line_reader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_line_reader.__dirname + '/lib.npmtest_line_reader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-line-reader/node_modules/line-reader/lib/line_reader.js":"'use strict';\n\nvar fs = require('fs'),\n    StringDecoder = require('string_decoder').StringDecoder;\n\nfunction createLineReader(readStream, options, creationCb) {\n  if (options instanceof Function) {\n    creationCb = options;\n    options = undefined;\n  }\n  if (!options) options = {};\n\n  var encoding = options.encoding || 'utf8',\n      separator = options.separator || /\\r\\n?|\\n/,\n      bufferSize = options.bufferSize || 1024,\n      bufferStr = '',\n      decoder = new StringDecoder(encoding),\n      closed = false,\n      eof = false,\n      separatorIndex = -1,\n      separatorLen,\n      readDefer,\n      moreToRead = false,\n      findSeparator;\n\n  if (separator instanceof RegExp) {\n    findSeparator = function() {\n      var result = separator.exec(bufferStr);\n      if (result && (result.index + result[0].length < bufferStr.length || eof)) {\n        separatorIndex = result.index;\n        separatorLen = result[0].length;\n      } else {\n        separatorIndex = -1;\n        separatorLen = 0;\n      }\n    };\n  } else {\n    separatorLen = separator.length;\n    findSeparator = function() {\n      separatorIndex = bufferStr.indexOf(separator);\n    };\n  }\n\n  function getReadStream() {\n    return readStream;\n  }\n\n  function close(cb) {\n    if (!closed) {\n      closed = true;\n      if (typeof readStream.close == 'function') {\n        readStream.close();\n      }\n      setImmediate(cb);\n    }\n  }\n\n  function onFailure(err) {\n    close(function(err2) {\n      return creationCb(err || err2);\n    });\n  }\n\n  function isOpen() {\n    return !closed;\n  }\n\n  function isClosed() {\n    return closed;\n  }\n\n  function waitForMoreToRead(cb) {\n    if (moreToRead) {\n      cb();\n    } else {\n      readDefer = cb;\n    }\n  }\n\n  function resumeDeferredRead() {\n    if (readDefer) {\n      readDefer();\n      readDefer = null;\n    }\n  }\n\n  function read(cb) {\n    waitForMoreToRead(function() {\n      var chunk;\n\n      try {\n        chunk = readStream.read(bufferSize);\n      } catch (err) {\n        cb(err);\n      }\n\n      if (chunk) {\n        bufferStr += decoder.write(chunk.slice(0, chunk.length));\n      } else {\n        moreToRead = false;\n      }\n\n      cb();\n    });\n  }\n\n  function onStreamReadable() {\n    moreToRead = true;\n    resumeDeferredRead();\n  }\n\n  function onStreamEnd() {\n    eof = true;\n    resumeDeferredRead();\n  }\n\n  readStream.on('readable', onStreamReadable);\n  readStream.on('end', onStreamEnd);\n  readStream.on('error', onFailure);\n\n  function shouldReadMore() {\n    findSeparator();\n\n    return separatorIndex < 0 && !eof;\n  }\n\n  function callWhile(conditionFn, bodyFn, doneCallback) {\n    if (conditionFn()) {\n      bodyFn(function (err) {\n        if (err) {\n          doneCallback(err);\n        } else {\n          setImmediate(callWhile, conditionFn, bodyFn, doneCallback);\n        }\n      });\n    } else {\n      doneCallback();\n    }\n  }\n\n  function readToSeparator(cb) {\n    callWhile(shouldReadMore, read, cb);\n  }\n\n  function hasNextLine() {\n    return bufferStr.length > 0 || !eof;\n  }\n\n  function nextLine(cb) {\n    if (closed) {\n      return cb(new Error('LineReader has been closed'));\n    }\n\n    function getLine(err) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (separatorIndex < 0 && eof) {\n        separatorIndex = bufferStr.length;\n      }\n      var ret = bufferStr.substring(0, separatorIndex);\n\n      bufferStr = bufferStr.substring(separatorIndex + separatorLen);\n      separatorIndex = -1;\n      cb(undefined, ret);\n    }\n\n    findSeparator();\n\n    if (separatorIndex < 0) {\n      if (eof) {\n        if (hasNextLine()) {\n          separatorIndex = bufferStr.length;\n          getLine();\n        } else {\n          return cb(new Error('No more lines to read.'));\n        }\n      } else {\n        readToSeparator(getLine);\n      }\n    } else {\n      getLine();\n    }\n  }\n\n  readToSeparator(function(err) {\n    if (err) {\n      onFailure(err);\n    } else {\n      return creationCb(undefined, {\n        hasNextLine: hasNextLine,\n        nextLine: nextLine,\n        close: close,\n        isOpen: isOpen,\n        isClosed: isClosed,\n        getReadStream: getReadStream\n      });\n    }\n  });\n}\n\nfunction open(filenameOrStream, options, cb) {\n  if (options instanceof Function) {\n    cb = options;\n    options = undefined;\n  }\n\n  var readStream;\n\n  if (typeof filenameOrStream.read == 'function') {\n    readStream = filenameOrStream;\n  } else if (typeof filenameOrStream === 'string' || filenameOrStream instanceof String) {\n    readStream = fs.createReadStream(filenameOrStream);\n  } else {\n    cb(new Error('Invalid file argument for LineReader.open.  Must be filename or stream.'));\n    return;\n  }\n\n  readStream.pause();\n  createLineReader(readStream, options, cb);\n}\n\nfunction eachLine(filename, options, iteratee, cb) {\n  if (options instanceof Function) {\n    cb = iteratee;\n    iteratee = options;\n    options = undefined;\n  }\n  var asyncIteratee = iteratee.length === 3;\n\n  var theReader;\n  var getReaderCb;\n\n  open(filename, options, function(err, reader) {\n    theReader = reader;\n    if (getReaderCb) {\n      getReaderCb(reader);\n    }\n\n    if (err) {\n      if (cb) cb(err);\n      return;\n    }\n\n    function finish(err) {\n      reader.close(function(err2) {\n        if (cb) cb(err || err2);\n      });\n    }\n\n    function newRead() {\n      if (reader.hasNextLine()) {\n        setImmediate(readNext);\n      } else {\n        finish();\n      }\n    }\n\n    function continueCb(continueReading) {\n      if (continueReading !== false) {\n        newRead();\n      } else {\n        finish();\n      }\n    }\n\n    function readNext() {\n      reader.nextLine(function(err, line) {\n        if (err) {\n          finish(err);\n        }\n\n        var last = !reader.hasNextLine();\n\n        if (asyncIteratee) {\n          iteratee(line, last, continueCb);\n        } else {\n          if (iteratee(line, last) !== false) {\n            newRead();\n          } else {\n            finish();\n          }\n        }\n      });\n    }\n\n    newRead();\n  });\n\n  // this hook is only for the sake of testing; if you choose to use it,\n  // please don't file any issues (unless you can also reproduce them without\n  // using this).\n  return {\n    getReader: function(cb) {\n      if (theReader) {\n        cb(theReader);\n      } else {\n        getReaderCb = cb;\n      }\n    }\n  };\n}\n\nmodule.exports.open = open;\nmodule.exports.eachLine = eachLine;\n"}